{"version":3,"sources":["components/trivia-quiz.js","app.js","index.js"],"names":["TriviaQuiz","props","state","error","isLoaded","triviaItems","askedQuestionIds","currentQuestion","currentAnswers","correctAnswer","getNewTriviaQuestion","bind","handleNextQuestionClick","this","_isMounted","fetch","response","ok","Error","statusText","json","setState","items","console","log","newAnswers","newQuestion","Math","floor","random","length","includes","id","push","incorrect","correct","i","j","temp","question","e","preventDefault","className","onClick","handleClick","React","Component","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"oRAwHeA,E,kDArHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,YAAa,GACbC,iBAAkB,GAClBC,gBAAiB,GACjBC,eAAgB,GAChBC,cAAe,IAGjB,EAAKC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKC,wBAA0B,EAAKA,wBAAwBD,KAA7B,gBAbd,E,yLAiBjBE,KAAKC,YAAa,E,kBAGOC,MAAM,8B,WAAvBC,E,QACQC,G,sBACNC,MAAMF,EAASG,Y,uBAEJH,EAASI,O,OAAtBA,E,OACFP,KAAKC,YACPD,KAAKQ,SAAS,CACZjB,UAAU,EACVC,YAAae,EAAKE,Q,kDAItBC,QAAQC,IAAR,MACAX,KAAKQ,SAAS,CACZjB,UAAU,EACVD,MAAK,O,QAGTU,KAAKH,uB,6JAILG,KAAKC,YAAa,I,6CAIlB,IAAIT,EAAcQ,KAAKX,MAAMG,YACzBC,EAAmBO,KAAKX,MAAMI,iBAC9BmB,EAAa,GACbC,EAAc,GAElB,GACEA,EAAcrB,EAAYsB,KAAKC,MAAMD,KAAKE,SAAWxB,EAAYyB,eAC1DxB,EAAiByB,SAASL,EAAYM,KAE/C1B,EAAiB2B,KAAKP,EAAYM,KAElCP,EAAaC,EAAYQ,WACdD,KAAKP,EAAYS,SAG5B,IAAK,IAAIC,EAAIX,EAAWK,OAAS,EAAGM,EAAI,EAAGA,IAAK,CAC9C,IAAMC,EAAIV,KAAKC,MAAMD,KAAKE,SAAWO,GAC/BE,EAAOb,EAAWW,GACxBX,EAAWW,GAAKX,EAAWY,GAC3BZ,EAAWY,GAAKC,EAGlBzB,KAAKQ,SAAS,CACZf,iBAAkBA,EAClBC,gBAAiBmB,EAAYa,SAC7B/B,eAAgBiB,M,8CAIIe,GACtBA,EAAEC,iBACF5B,KAAKH,yB,+BAiBL,OACE,qBAAKgC,UAAU,yEAAf,SACE,sBAAKA,UAAU,sCAAf,UACE,0CACY7B,KAAKX,MAAMI,iBAAiBwB,OADxC,IAEGjB,KAAKX,MAAMG,YAAYyB,UAE1B,6BAAKjB,KAAKX,MAAMK,kBAChB,+BACE,6BAAKM,KAAKX,MAAMM,eAAe,KAC/B,6BAAKK,KAAKX,MAAMM,eAAe,KAC/B,6BAAKK,KAAKX,MAAMM,eAAe,KAC/B,6BAAKK,KAAKX,MAAMM,eAAe,QAEjC,wBAAQmC,QAAS9B,KAAK+B,YAAaF,UAAU,SAA7C,oC,GA7GeG,IAAMC,WCkBhBC,E,uKAdX,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWlD,Y,GALzB6C,IAAMC,WCCxBK,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.07bda0cc.chunk.js","sourcesContent":["import React from \"react\";\n\nclass TriviaQuiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      triviaItems: [],\n      askedQuestionIds: [],\n      currentQuestion: \"\",\n      currentAnswers: [],\n      correctAnswer: \"\",\n    };\n\n    this.getNewTriviaQuestion = this.getNewTriviaQuestion.bind(this);\n    this.handleNextQuestionClick = this.handleNextQuestionClick.bind(this);\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n\n    try {\n      const response = await fetch(\"http://localhost:4444/quiz\");\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      const json = await response.json();\n      if (this._isMounted) {\n        this.setState({\n          isLoaded: true,\n          triviaItems: json.items,\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      this.setState({\n        isLoaded: true,\n        error,\n      });\n    }\n    this.getNewTriviaQuestion();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  getNewTriviaQuestion() {\n    let triviaItems = this.state.triviaItems;\n    let askedQuestionIds = this.state.askedQuestionIds;\n    let newAnswers = [];\n    let newQuestion = \"\";\n\n    do {\n      newQuestion = triviaItems[Math.floor(Math.random() * triviaItems.length)];\n    } while (askedQuestionIds.includes(newQuestion.id));\n\n    askedQuestionIds.push(newQuestion.id);\n\n    newAnswers = newQuestion.incorrect;\n    newAnswers.push(newQuestion.correct);\n\n    // Randomize answer order with Fisher-Yates Algorithm\n    for (let i = newAnswers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = newAnswers[i];\n      newAnswers[i] = newAnswers[j];\n      newAnswers[j] = temp;\n    }\n\n    this.setState({\n      askedQuestionIds: askedQuestionIds,\n      currentQuestion: newQuestion.question,\n      currentAnswers: newAnswers,\n    });\n  }\n\n  handleNextQuestionClick(e) {\n    e.preventDefault();\n    this.getNewTriviaQuestion();\n  }\n\n  render() {\n    // const {\n    //   error,\n    //   isLoaded,\n    //   triviaItems,\n    //   askedQuestionIds,\n    //   currentQuestion,\n    //   currentAnswers,\n    // } = this.state;\n    // if (this.state.error) {\n    //   return <div>Error: {this.state.error.message}</div>;\n    // } else if (!this.state.isLoaded) {\n    //   return <div>Loading...</div>;\n    // } else {\n    return (\n      <div className=\"bg-blue-light w-screen h-screen flex justify-center place-items-center\">\n        <div className=\"max-w-6xl w-full h-64 bg-gray-light\">\n          <p>\n            Question {this.state.askedQuestionIds.length}/\n            {this.state.triviaItems.length}\n          </p>\n          <h2>{this.state.currentQuestion}</h2>\n          <ul>\n            <li>{this.state.currentAnswers[0]}</li>\n            <li>{this.state.currentAnswers[1]}</li>\n            <li>{this.state.currentAnswers[2]}</li>\n            <li>{this.state.currentAnswers[3]}</li>\n          </ul>\n          <button onClick={this.handleClick} className=\"bg-red\">\n            Next Question\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TriviaQuiz;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TriviaQuiz from \"./components/trivia-quiz.js\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={TriviaQuiz} />\n          {/* <Route path=\"/\" exact component={LandingView} /> */}\n          {/* <Route path=\"/add\" component={FormView} /> */}\n          {/* <Route path=\"/play\" component={TriviaQuiz} /> */}\n          {/* <Route component={LandingView} /> */}\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.output.css\";\nimport App from \"./app.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}